{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport authService from \"./authService\";\n//Get user from localstorage\n//const user = JSON.parse(localStorage.getItem('user'))\nconst user = localStorage.getItem(\"user\");\nconst initialState = {\n  user: user ? user : null,\n  //user: null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: \"\"\n};\n//Register new user\nexport const register = createAsyncThunk(\"auth/register\", async (user, thunkAPI) => {\n  console.log(user);\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n//Login user\nexport const login = createAsyncThunk(\"auth/login\", async (user, thunkAPI) => {\n  console.log(user);\n});\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = \"\";\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","user","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","register","thunkAPI","console","log","error","response","data","toString","rejectWithValue","login","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["D:/VacQ/vacqfrontend/src/features/auth/authSlice.jsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport authService from \"./authService\";\r\n//Get user from localstorage\r\n//const user = JSON.parse(localStorage.getItem('user'))\r\nconst user = localStorage.getItem(\"user\");\r\nconst initialState = {\r\n  user: user ? user : null,\r\n  //user: null,\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: \"\",\r\n};\r\n//Register new user\r\nexport const register = createAsyncThunk(\r\n  \"auth/register\",\r\n  async (user, thunkAPI) => {\r\n    console.log(user);\r\n    try {\r\n      return await authService.register(user);\r\n    } catch (error) {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  }\r\n);\r\n//Login user\r\nexport const login = createAsyncThunk(\"auth/login\", async (user, thunkAPI) => {\r\n  console.log(user);\r\n});\r\nexport const authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.isLoading = false;\r\n      state.isError = false;\r\n      state.isSuccess = false;\r\n      state.message = \"\";\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(register.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(register.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(register.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n        state.user = null;\r\n      });\r\n  },\r\n});\r\nexport const { reset } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,WAAW,MAAM,eAAe;AACvC;AACA;AACA,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;AACzC,MAAMC,YAAY,GAAG;EACnBH,IAAI,EAAEA,IAAI,GAAGA,IAAI,GAAG,IAAI;EACxB;EACAI,OAAO,EAAE,KAAK;EACdC,SAAS,EAAE,KAAK;EAChBC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE;AACX,CAAC;AACD;AACA,OAAO,MAAMC,QAAQ,GAAGV,gBAAgB,CACtC,eAAe,EACf,OAAOE,IAAI,EAAES,QAAQ,KAAK;EACxBC,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC;EACjB,IAAI;IACF,OAAO,MAAMD,WAAW,CAACS,QAAQ,CAACR,IAAI,CAAC;EACzC,CAAC,CAAC,OAAOY,KAAK,EAAE;IACd,MAAML,OAAO,GACVK,KAAK,CAACC,QAAQ,IACbD,KAAK,CAACC,QAAQ,CAACC,IAAI,IACnBF,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACP,OAAO,IAC7BK,KAAK,CAACL,OAAO,IACbK,KAAK,CAACG,QAAQ,CAAC,CAAC;IAClB,OAAON,QAAQ,CAACO,eAAe,CAACT,OAAO,CAAC;EAC1C;AACF,CACF,CAAC;AACD;AACA,OAAO,MAAMU,KAAK,GAAGnB,gBAAgB,CAAC,YAAY,EAAE,OAAOE,IAAI,EAAES,QAAQ,KAAK;EAC5EC,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC;AACnB,CAAC,CAAC;AACF,OAAO,MAAMkB,SAAS,GAAGrB,WAAW,CAAC;EACnCsB,IAAI,EAAE,MAAM;EACZhB,YAAY;EACZiB,QAAQ,EAAE;IACRC,KAAK,EAAGC,KAAK,IAAK;MAChBA,KAAK,CAAChB,SAAS,GAAG,KAAK;MACvBgB,KAAK,CAAClB,OAAO,GAAG,KAAK;MACrBkB,KAAK,CAACjB,SAAS,GAAG,KAAK;MACvBiB,KAAK,CAACf,OAAO,GAAG,EAAE;IACpB;EACF,CAAC;EACDgB,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACjB,QAAQ,CAACkB,OAAO,EAAGJ,KAAK,IAAK;MACpCA,KAAK,CAAChB,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDmB,OAAO,CAACjB,QAAQ,CAACmB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC9CN,KAAK,CAAChB,SAAS,GAAG,KAAK;MACvBgB,KAAK,CAACjB,SAAS,GAAG,IAAI;MACtBiB,KAAK,CAACtB,IAAI,GAAG4B,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDJ,OAAO,CAACjB,QAAQ,CAACsB,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAC7CN,KAAK,CAAChB,SAAS,GAAG,KAAK;MACvBgB,KAAK,CAAClB,OAAO,GAAG,IAAI;MACpBkB,KAAK,CAACf,OAAO,GAAGqB,MAAM,CAACC,OAAO;MAC9BP,KAAK,CAACtB,IAAI,GAAG,IAAI;IACnB,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AACF,OAAO,MAAM;EAAEqB;AAAM,CAAC,GAAGH,SAAS,CAACa,OAAO;AAC1C,eAAeb,SAAS,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}